import { fireEvent, render } from '@/tests/test-utils'
import { type SafeTransaction } from '@safe-global/safe-core-sdk-types'
import DecodedTx from '.'
import { waitFor } from '@testing-library/react'
import type { DecodedDataResponse } from '@safe-global/safe-gateway-typescript-sdk'

describe('DecodedTx', () => {
  it('should render a native transfer', async () => {
    const result = render(
      <DecodedTx
        tx={
          {
            data: {
              to: '0x3430d04E42a722c5Ae52C5Bffbf1F230C2677600',
              value: '1000000',
              data: '0x',
              operation: 0,
              baseGas: '0',
              gasPrice: '0',
              gasToken: '0x0000000000000000000000000000000000000000',
              refundReceiver: '0x0000000000000000000000000000000000000000',
              nonce: 58,
              safeTxGas: '0',
            },
          } as SafeTransaction
        }
        decodedData={{
          method: '',
          parameters: [
            {
              name: 'to',
              type: 'address',
              value: '0x3430d04E42a722c5Ae52C5Bffbf1F230C2677600',
            },
            {
              name: 'value',
              type: 'uint256',
              value: '1000000',
            },
          ],
        }}
        showMethodCall
      />,
    )

    expect(result.queryByText('Value:')).toBeInTheDocument()

    fireEvent.click(result.getByText('Advanced details'))

    await waitFor(() => {
      expect(result.queryByText('safeTxGas:')).toBeInTheDocument()
      expect(result.queryByText('Raw data:')).toBeInTheDocument()
    })
  })

  it('should render a transfer with custom data details', async () => {
    const result = render(
      <DecodedTx
        tx={
          {
            data: {
              to: '0x3430d04E42a722c5Ae52C5Bffbf1F230C2677600',
              value: '1000000',
              data: '0x000001ad6abfb9ea000000000000000000000000000000000000000000000000000000000000019d0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000098000000000000000000000000000000000000000000000000000000000000008e4ee8f0b86000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000cd00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000808415565b0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000f1bd50a00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000005c0000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000002556e6973776170563200000000000000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000f21a484000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f164fc0ec4e93095b804a4795bbe1e041497b92a00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000005cf7a000000000000000000000000ad01c20d5886137e056775af56915de824c8fce5000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000ff8513c6b54542145a1b4cf70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000072a600000000000000000000000000000000000000000000000000000000000000cd00000000000000000000000000000000000000000000000000000000000000020000000000000000000000007e8485cf11c370519793d1c2d0a77bd139fdac38000000000000000000000000fea53c695fdf95cfb34514d916ac236e620201bd0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000f2ed992000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000066ed25970000000000000000000000000000000000000000000000000000000066ed799dd00dfeeddeadbeef765753be7f7a64d5509974b0d678e1e3149b02f4',
              operation: 0,
              baseGas: '0',
              gasPrice: '0',
              gasToken: '0x0000000000000000000000000000000000000000',
              refundReceiver: '0x0000000000000000000000000000000000000000',
              nonce: 58,
              safeTxGas: '0',
            },
          } as SafeTransaction
        }
        decodedData={
          {
            method: '',
          } as DecodedDataResponse
        }
        showMethodCall
      />,
    )

    expect(result.queryByText('Value:')).toBeInTheDocument()
    expect(result.queryByText('Data (hex-encoded)')).toBeInTheDocument()

    fireEvent.click(result.getByText('Advanced details'))

    await waitFor(() => {
      expect(result.queryByText('safeTxGas:')).toBeInTheDocument()
      expect(result.queryByText('Raw data:')).toBeInTheDocument()
    })
  })

  it('should render an ERC20 transfer', async () => {
    const result = render(
      <DecodedTx
        tx={
          {
            data: {
              to: '0x3430d04E42a722c5Ae52C5Bffbf1F230C2677600',
              value: '0',
              data: '0xa9059cbb000000000000000000000000474e5ded6b5d078163bfb8f6dba355c3aa5478c80000000000000000000000000000000000000000000000008ac7230489e80000',
              operation: 0,
              baseGas: '0',
              gasPrice: '0',
              gasToken: '0x0000000000000000000000000000000000000000',
              refundReceiver: '0x0000000000000000000000000000000000000000',
              nonce: 58,
              safeTxGas: '0',
            },
          } as SafeTransaction
        }
        decodedData={{
          method: 'transfer',
          parameters: [
            {
              name: 'to',
              type: 'address',
              value: '0x474e5Ded6b5D078163BFB8F6dBa355C3aA5478C8',
            },
            {
              name: 'value',
              type: 'uint256',
              value: '16745726664999765048',
            },
          ],
        }}
        showMethodCall
      />,
    )

    fireEvent.click(result.getByText('Advanced details'))

    await waitFor(() => {
      expect(result.queryByText('transfer')).toBeInTheDocument()
      expect(result.queryByText('Parameters')).toBeInTheDocument()
      expect(result.queryByText('to')).toBeInTheDocument()
      expect(result.queryByText('address')).toBeInTheDocument()
      expect(result.queryByText('0x474e...78C8')).toBeInTheDocument()
      expect(result.queryByText('value')).toBeInTheDocument()
      expect(result.queryByText('uint256')).toBeInTheDocument()
      expect(result.queryByText('16745726664999765048')).toBeInTheDocument()
    })
  })

  it('should render a multisend transaction', async () => {
    const result = render(
      <DecodedTx
        tx={
          {
            data: {
              to: '0x40A2aCCbd92BCA938b02010E17A5b8929b49130D',
              value: '0',
              data: '0x8d80ff00',
              operation: 1,
              baseGas: '0',
              gasPrice: '0',
              gasToken: '0x0000000000000000000000000000000000000000',
              refundReceiver: '0x0000000000000000000000000000000000000000',
              nonce: 58,
              safeTxGas: '0',
            },
          } as SafeTransaction
        }
        decodedData={{
          method: 'multiSend',
          parameters: [
            {
              name: 'transactions',
              type: 'bytes',
              value: '0x0057f1887a8bf19b14fc0df',
              valueDecoded: [
                {
                  operation: 0,
                  to: '0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85',
                  value: '0',
                  data: '0x42842e0e0000000000000000000',
                  dataDecoded: {
                    method: 'safeTransferFrom',
                    parameters: [
                      {
                        name: 'from',
                        type: 'address',
                        value: '0xA77DE01e157f9f57C7c4A326eeE9C4874D0598b6',
                      },
                      {
                        name: 'to',
                        type: 'address',
                        value: '0x474e5Ded6b5D078163BFB8F6dBa355C3aA5478C8',
                      },
                      {
                        name: 'tokenId',
                        type: 'uint256',
                        value: '52964617156216674852059480948658573966398315289847646343083345905048987083870',
                      },
                    ],
                  },
                },
                {
                  operation: 0,
                  to: '0xD014e20A75437a4bd0FbB40498FF94e6F337c3e9',
                  value: '0',
                  data: '0x42842e0e000000000000000000000000a77de',
                  dataDecoded: {
                    method: 'safeTransferFrom',
                    parameters: [
                      {
                        name: 'from',
                        type: 'address',
                        value: '0xA77DE01e157f9f57C7c4A326eeE9C4874D0598b6',
                      },
                      {
                        name: 'to',
                        type: 'address',
                        value: '0x474e5Ded6b5D078163BFB8F6dBa355C3aA5478C8',
                      },
                      {
                        name: 'tokenId',
                        type: 'uint256',
                        value: '412',
                      },
                    ],
                  },
                },
              ],
            },
          ],
        }}
        showMethodCall
      />,
    )

    expect(result.queryAllByText('safeTransferFrom').length).toBeGreaterThan(1)
  })

  it('should render a function call without parameters', async () => {
    const result = render(
      <DecodedTx
        tx={
          {
            data: {
              to: '0xe91d153e0b41518a2ce8dd3d7944fa863463a97d',
              value: '5000000000000',
              data: '0xd0e30db0',
              operation: 0,
              baseGas: '0',
              gasPrice: '0',
              gasToken: '0x0000000000000000000000000000000000000000',
              refundReceiver: '0x0000000000000000000000000000000000000000',
              nonce: 58,
              safeTxGas: '0',
            },
          } as SafeTransaction
        }
        decodedData={{
          method: 'deposit',
          parameters: [],
        }}
        showMethodCall
      />,
    )

    fireEvent.click(result.getByText('Advanced details'))

    expect(result.queryByText('deposit')).toBeInTheDocument()
  })
})
